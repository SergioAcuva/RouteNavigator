# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RouteNavigatorDialog
                                 A QGIS plugin
 Calculo de rutas optimas con los algoritmos de A* y Dijkstra
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Sergio Acuña
        email                : ssacunav@udistrital.edu.co
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt import QtGui, QtWidgets
from qgis.core import QgsProject, QgsVectorLayer, QgsPoint, QgsFeature, QgsGeometry, QgsSymbol, QgsSimpleMarkerSymbolLayer
from qgis.gui import QgsMapCanvas, QgsMapToolEmitPoint
from .ui_route_navigator_dialog_base import Ui_RouteNavigatorDialogBase

class RouteNavigatorDialog(QtWidgets.QDialog, Ui_RouteNavigatorDialogBase):
    def __init__(self, iface, parent=None):
        super(RouteNavigatorDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.point_tool = QgsMapToolEmitPoint(self.canvas)
        self.point_tool.canvasClicked.connect(self.add_point_start)

        self.pushButton.clicked.connect(self.start_select_point_start)
        self.pushButton_2.clicked.connect(self.start_select_point_end)
        self.pushButton_5.clicked.connect(self.clear_points)  # Conectar el botón "borrar"

        self.start_layer = None
        self.end_layer = None

    def start_select_point_start(self):
        self.point_tool.canvasClicked.disconnect()
        self.point_tool.canvasClicked.connect(self.add_point_start)
        self.canvas.setMapTool(self.point_tool)

    def start_select_point_end(self):
        self.point_tool.canvasClicked.disconnect()
        self.point_tool.canvasClicked.connect(self.add_point_end)
        self.canvas.setMapTool(self.point_tool)

    def add_point_start(self, point):
        if self.start_layer:
            QgsProject.instance().removeMapLayer(self.start_layer)

        self.start_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Inicio", "memory")
        pr = self.start_layer.dataProvider()
        self.start_layer.updateFields()
        QgsProject.instance().addMapLayer(self.start_layer)

        symbol = QgsSymbol.defaultSymbol(self.start_layer.geometryType())
        symbol_layer = symbol.symbolLayer(0)
        if isinstance(symbol_layer, QgsSimpleMarkerSymbolLayer):
            symbol_layer.setSize(10)
            self.start_layer.renderer().setSymbol(symbol)

        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(point))
        pr.addFeature(feature)
        self.start_layer.updateExtents()
        self.canvas.refresh()

    def add_point_end(self, point):
        if self.end_layer:
            QgsProject.instance().removeMapLayer(self.end_layer)

        self.end_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Fin", "memory")
        pr = self.end_layer.dataProvider()
        self.end_layer.updateFields()
        QgsProject.instance().addMapLayer(self.end_layer)

        symbol = QgsSymbol.defaultSymbol(self.end_layer.geometryType())
        symbol_layer = symbol.symbolLayer(0)
        if isinstance(symbol_layer, QgsSimpleMarkerSymbolLayer):
            symbol_layer.setSize(10)
            self.end_layer.renderer().setSymbol(symbol)

        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(point))
        pr.addFeature(feature)
        self.end_layer.updateExtents()
        self.canvas.refresh()

    def clear_points(self):
        if self.start_layer:
            QgsProject.instance().removeMapLayer(self.start_layer)
            self.start_layer = None  # Establecer como None después de eliminar la capa
        if self.end_layer:
            QgsProject.instance().removeMapLayer(self.end_layer)
            self.end_layer = None  # Establecer como None después de eliminar la capa

